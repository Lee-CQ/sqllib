v0.2.6 -- 2020/08/27
    1. 相对的统一了MySQL和sqlite数据库调用的函数名同一性
    2. 丰富了部分注释
    3. 调整了部分函数的逻辑.

v0.2.5 -- 2020/02/29
    1. 修改show_columns() - 表名前缀问题 <-  ok
    2. 修改show_table -> show_tables                     --ok  2020/07/20
    3. 修改show_tables逻辑 str(_c[0]) -> _c[0].decode()   -- ok 2020/07/20

v0.2.4 -- 2020/01/11
    1. 新增 def _alter_table():  --> 向已有数据表中添加 键
    2. 更新详细了注释
    3. MySQL - 增加了对 pymysql.connect() - 所需参数的详细注解 -- 1/12

v0.2.3 -- 2019/12/18
    1. 新增 DBUtils.PooledDB 模块：连接池
        1.1. 新增MyMySQL.pooled_sql()模块，以启用连接池
        1.2. 修改MyMySQL.__write_db(), MySQL.__write_rows(), MySQL.__read_db():
                当他的子类或者实例调用 -> MySQL.pooled_sql() <- 方法时，以开启连接池；
                if self.pooled_sql is not None:
                    __sql = self.pooled_sql.connection()
                else:
                    __sql = self._sql
    2. 微调 MySQL._create_table()方法：
        源：( with self._sql.cursor() as cur: \\ cur.execute(command, args) \\self._sql.commit() \\ return 0) ==>
        修改为：( return self.__write_db(command, args) )
        有点：便于代码的重用性；

v0.1.1 -- 2019/11/2
    1. 构建 class:MySQL 框架
        以 MySQL.__write_db(), MySQL.__write_rows(), MySQL.__read_db()为基础访问SQL。
        创建_select, _insert, _update, _drop, _delete为基础的接口访问。
    2. 构建访问控制 & 安全 相关的语句。
        __key_and_table_is_exists
    3. 优化流程控制。
    4. 优化数据库访问。

